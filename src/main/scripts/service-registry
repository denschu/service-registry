#!/bin/bash
#
# /etc/init.d/service-registry console|start|stop|restart|status
#
# A Linux start/stop script for Java daemons.
#
set +x
. /etc/rc.status                                                       # load start/stop script "rc" definitions
NAME="$(basename $0)"                                                  # the name of the script
. /etc/sysconfig/${NAME}                                               # Source instance specific config file (JAVA_HOME,JAVA_OPTS, etc.)
APPLICATION_HOME="/opt/standalone/${NAME}"                             # home of the application executable
PROG_CONF="/etc/${NAME}/"                                              # home of the configuration files (will be added to classpath)
JAVA_OPTS_GLOBAL="-Dloader.path=${PROG_CONF},${APPLICATION_HOME}/${NAME}.jar" # global Java Opts
LOG_DIR="/var/log"                                                     # the path to the logdirectory
LOG_FILE="$LOG_DIR/$NAME.log"                                          # the absolute path to the logfile
scriptFile=$(readlink -fn $(type -p $0))                               # the absolute, dereferenced path of this script file
scriptDir=$(dirname $scriptFile)                                       # absolute path of the script directory
applDir="$scriptDir"                                                   # home directory of the service application
serviceName=${NAME}			                                           # service name
serviceUser="root"                                                     # OS user name for the service
serviceGroup="root"                                                    # OS group name for the service
maxShutdownTime=15                                                     # maximum number of seconds to wait for the daemon to terminate normally
pidFile="/var/run/$serviceName.pid"                              	   # name of PID file (PID = process ID number)
javaCommand="java"                                                     # name of the Java launcher without the path
javaExe="/usr/java/jdk1.7.0_25/bin/$javaCommand"                       # file name of the Java application launcher executable
javaArgs="-jar ${APPLICATION_HOME}/${NAME}.jar"                        # arguments for Java launcher
javaCommandLine="$javaExe $JAVA_OPTS $JAVA_OPTS_GLOBAL $javaArgs --logging.file=/var/log/${NAME}.log"      # command line to start the Java service application

#make the log directory if it doesn't exist
if [ ! -d "$LOG_DIR" ] ; then
   mkdir $LOG_DIR
fi

# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chown $serviceUser $filename || return 1
   chmod g+w $filename || return 1
   return 0; }

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0; }

# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
   local pid="$1"
   local cmd="$(ps -p $pid --no-headers -o comm)"
   if [ "$cmd" != "$javaCommand" -a "$cmd" != "$javaCommand.bin" ]; then return 1; fi
   grep -q --binary -F "$serviceName" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0; }

# Returns 0 when the service is running and sets the variable $servicePid to the PID.
function getServicePid {
   if [ ! -f $pidFile ]; then return 1; fi
   servicePid="$(<$pidFile)"
   checkProcessIsRunning $servicePid || return 1
   checkProcessIsOurService $servicePid || return 1
   return 0; }

function startServiceProcess {
   cd $applDir || return 1
   rm -f $pidFile
   makeFileWritable $pidFile || return 1
   makeFileWritable $LOG_FILE || return 1
   local cmd="setsid $javaCommandLine >>$LOG_FILE 2>&1 & echo \$! >$pidFile"
   sudo -u $serviceUser $SHELL -c "$cmd" || return 1
   sleep 0.1
   servicePid="$(<$pidFile)"
   if checkProcessIsRunning $servicePid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
      fi
   return 0; }

function stopServiceProcess {
   kill $servicePid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $servicePid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $servicePid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $servicePid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; }

function runInConsoleMode {
   getServicePid
   if [ $? -eq 0 ]; then echo "$serviceName is already running"; return 1; fi
   cd $applDir || return 1
   sudo -u $serviceUser $javaCommandLine || return 1
   if [ $? -eq 0 ]; then return 1; fi
   return 0; }

function startService {
   getServicePid
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; rc_failed 0; rc_status -v; return 0; fi
   echo -n "Starting $serviceName   "
   startServiceProcess
   if [ $? -ne 0 ]; then rc_failed 1; rc_status -v; return 1; fi
   rc_failed 0
   rc_status -v
   return 0; }

function stopService {
   getServicePid
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; rc_failed 0; rc_status -v; return 0; fi
   echo -n "Stopping $serviceName   "
   stopServiceProcess
   if [ $? -ne 0 ]; then rc_failed 1; rc_status -v; return 1; fi
   rc_failed 0
   rc_status -v
   return 0; }

function checkServiceStatus {
   echo -n "Checking for $serviceName:   "
   if getServicePid; then
      rc_failed 0
    else
      rc_failed 3
      fi
   rc_status -v
   return 0; }

function main {
   rc_reset
   case "$1" in
      console)                                             # runs the Java program in console mode
         runInConsoleMode
         ;;
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {console|start|stop|restart|status}"
         exit 1
         ;;
      esac
   rc_exit; }

main $1