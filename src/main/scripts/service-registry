#!/bin/bash
#
# /etc/init.d/service-registry start|stop|restart|status|console
#
# A Linux start/stop script for Spring Boot Applications.
#
SERVICENAME="$(basename $0)"                                           # The name of the service
. /etc/sysconfig/${SERVICENAME}                                       # Source instance specific config file (JAVA_HOME,JAVA_OPTS, etc.)
JAVA_OPTS_GLOBAL="-Dloader.path=${PROG_CONF},${APPLICATION_HOME}/${SERVICENAME}.jar" # Add PROG_CONF to the classpath
maxShutdownTime=15                                                     # maximum number of seconds to wait for the daemon to terminate normally
JAVA_ARGS="-jar ${APPLICATION_HOME}/${SERVICENAME}.jar"                # arguments for Java launcher
javaCommandLine="$JAVA_HOME/bin/java $JAVA_OPTS $JAVA_OPTS_GLOBAL $JAVA_ARGS $PROG_ARGS" # command line to start the Java service application

#make the log directory if it doesn't exist
if [ ! -d "$LOG_DIR" ] ; then
   mkdir $LOG_DIR
fi

# Returns 0 when the service is running and sets the variable $servicePid to the PID.
function getServicePid {
   if [ ! -f $pidFile ]; then return 1; fi
   servicePid="$(<$pidFile)"
   return 0; }

function isProcessRunning {
  if getServicePid
  then
    if ps -p $servicePid > /dev/null
	then
		echo "Service is running"
		return 0 
	fi
  fi
  return 1
}

function startServiceProcess {
   rm -f $pidFile
   nohup $javaCommandLine >/dev/null 2>&1 &
   sleep 5
   servicePid="$(<$pidFile)"
   if isProcessRunning; then :; else
      echo -ne "\n$SERVICENAME start failed, see logfile."
      return 1
      fi
   return 0; 
}

function stopServiceProcess {
   kill $servicePid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      isProcessRunning
      if [ $? -ne 0 ]; then
         #rm -f $pidFile
         return 0
      fi
      sleep 0.1
   done
   echo -e "\n$SERVICENAME did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $servicePid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      isProcessRunning
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
      fi
      sleep 0.1
   done
   echo "Error: $SERVICENAME could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; 
}

function runInConsoleMode {
   getServicePid
   if [ $? -eq 0 ]; then echo "$SERVICENAME is already running"; return 1; fi
   $javaCommandLine || return 1
   if [ $? -eq 0 ]; then return 1; fi
   return 0; }

function startService {
   getServicePid
   if [ $? -eq 0 ]; then echo -n "$SERVICENAME is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $SERVICENAME   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$servicePid"
   RETVAL=0
   return 0; }

function stopService {
   isProcessRunning
   if [ $? -ne 0 ]; then echo -n "$SERVICENAME is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $SERVICENAME   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$servicePid"
   return 0; }

function checkServiceStatus {
   echo -n "Checking for $SERVICENAME:   "
   if isProcessRunning; then
      echo "running PID=$servicePid"
      RETVAL=0
   else
      echo "stopped"
      RETVAL=3
   fi
   return 0; }

function main {
   RETVAL=0
   case "$1" in
      console)                                             # runs the Java program in console mode
         runInConsoleMode
         ;;
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status|console|debug}"
         exit 1
         ;;
      esac
   exit $RETVAL 
}

main $1